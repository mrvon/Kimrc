
" Disable compeltefunc conflicts warnning
let neocomplete#force_overwrite_completefunc                =1
" Disable AutoComplPop.
let g:acp_enableAtStartup                                   =0
" Use neocomplete.
let g:neocomplete#enable_at_startup                         =1
" Use smartcase.
let g:neocomplete#enable_smart_case                         =1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length         =3
" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries           ={
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'lua' : $MYLUADICT.'/cpp_export.txt',
    \ }
" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns                      ={}
endif
let g:neocomplete#keyword_patterns['default']               ='\h\w*'
" Close popup by <Space>.
inoremap <expr><Space> pumvisible() ? neocomplete#close_popup()."\<Space>" : "\<Space>"
" Enable omni completion.
autocmd FileType css            setlocal omnifunc           =csscomplete#CompleteCSS
autocmd FileType html,markdown  setlocal omnifunc           =htmlcomplete#CompleteTags
autocmd FileType javascript     setlocal omnifunc           =javascriptcomplete#CompleteJS
autocmd FileType python         setlocal omnifunc           =pythoncomplete#Complete
autocmd FileType xml            setlocal omnifunc           =xmlcomplete#CompleteTags
" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns             ={}
endif
let g:neocomplete#sources#omni#input_patterns.lua           ='\w\+[.:]\|require\s*(\?["'']\w*'
